import streamlit as st
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    df = pd.read_csv("tmdb_5000_movies.csv")
    df = df[['title', 'overview']].dropna()
    return df

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã TF-IDF –∏ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞
@st.cache_resource
def create_similarity_matrix(data):
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(data['overview'])
    cosine_sim = linear_kernel(tfidf_matrix, tfidf_matrix)
    return cosine_sim

# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def recommend(title, data, cosine_sim):
    indices = pd.Series(data.index, index=data['title']).drop_duplicates()
    idx = indices.get(title)
    if idx is None:
        return ["–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π."]
    
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:6]
    movie_indices = [i[0] for i in sim_scores]
    return data['title'].iloc[movie_indices].tolist()

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.set_page_config(page_title="üé¨ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å–º–æ–≤", layout="centered")
    st.title("üé• –†–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∏–ª—å–º–æ–≤")
    
    data = load_data()
    cosine_sim = create_similarity_matrix(data)
    
    selected_movie = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å–º:", data['title'].sort_values())
    
    if st.button("–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"):
        recommendations = recommend(selected_movie, data, cosine_sim)
        st.subheader("üéØ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ñ–∏–ª—å–º—ã:")
        for i, movie in enumerate(recommendations, 1):
            st.write(f"{i}. {movie}")

if __name__ == '__main__':
    main()
